#!/usr/bin/php
<?php

define('ASCII_MIN', 32);
define('ASCII_MAX', 255);
define('BASE64_MIN', 47);
define('BASE64_MAX', 122);
define('CHUNK_SIZE', 1024);
define('STAMP_SIZE', 12);

/**
 * Cryptor
 */
class Cryptor {
	private $arrActions = [
		'e' => 'encrypt',
		'd' => 'decrypt'
	];

	private $strScriptName = __FILE__;
	private $strAction = '';
	private $strInputFile = '';
	private $strOutputFile = '';
	private $strSignature = '';

	public function __construct($arrArgs) {
		$this->strScriptName = $arrArgs[0];
		$this->strAction = trim(strtolower($arrArgs[1]));
		$this->strInputFile = $arrArgs[2];

		if (isset($arrArgs[3])) {
			$this->strOutputFile = $arrArgs[3];
		}

		if ($this->validate()) {
			$this->run();
		} else {
			$this->usage();
			die();
		}
	}

	private function run() {
		$strKey  = md5($this->readString('Enter key: '));
		$strSign = md5(file_get_contents(__FILE__) . $strKey);

		$strBuffer = '';
		$intAltMin = BASE64_MIN - ASCII_MIN;
		$intAltMax = ASCII_MAX - (BASE64_MAX - ASCII_MIN);

		$srmInFile   = fopen($this->strInputFile, 'r');
		$srmOutFile  = fopen($this->strOutputFile, 'w');
		$intFileSize = filesize($this->strInputFile) > 0 ? filesize($this->strInputFile) : 1;
		$intNumChunk = ceil($intFileSize / CHUNK_SIZE);
		$intPosition = 0;

		switch ($this->strAction) {
			case 'encrypt':
				$intStamp = time();
				$intStamp = substr((microtime(true) * 10000), (-1 * STAMP_SIZE));

				fwrite($srmOutFile, $strSign);
				fwrite($srmOutFile, $intStamp);

				while (!feof($srmInFile)) {
					$strOutput = '';
					$strBuffer = fread($srmInFile, CHUNK_SIZE);

					foreach (str_split(base64_encode($strBuffer)) as $intIndex => $strChar) {
						$intChar = ord($strChar);
						$intChar -= $intAltMin;

						foreach (str_split($strKey) as $intKeyIndex => $strKeyChar) {
							$intKeyChar = ord($strKeyChar);
							$intMod = ($intStamp + $intKeyChar) % $intAltMax;
							$intChar += $intMod;
							$intChar -= ($intKeyIndex % $intMod);

							if ($intKeyIndex % 2 == 0) {
								$intChar -= ($intStamp + $intIndex) % $intMod;
							} else {
								$intChar += ($intStamp + $intIndex) % $intMod;
							}
						}

						$strOutput .= chr($intChar);
					}

					fwrite($srmOutFile, $strOutput);

					$intPosition++;
					$intPercent = round( ( $intPosition / $intNumChunk ) * 100, 0 );
					$this->msg("Encrypting [$intPercent%]", true);
				}

				fclose($srmOutFile);
				fclose($srmInFile);

				break;
			case 'decrypt':
				if (fread($srmInFile, strlen($strSign)) != $strSign) {
					$this->msg("Invalid signature!");
				} else {
					$intStamp = fread($srmInFile, STAMP_SIZE);

					while (!feof($srmInFile)) {
						$strOutput = '';
						$strBuffer = fread($srmInFile, CHUNK_SIZE);

						foreach (str_split($strBuffer) as $intIndex => $strChar) {
							$intChar = ord($strChar);
							$intChar += $intAltMin;

							foreach (str_split($strKey) as $intKeyIndex => $strKeyChar) {
								$intKeyChar = ord($strKeyChar);
								$intMod = ($intStamp + $intKeyChar) % $intAltMax;
								$intChar -= $intMod;
								$intChar += ($intKeyIndex % $intMod);

								if ($intKeyIndex % 2 == 0) {
									$intChar += ($intStamp + $intIndex) % $intMod;
								} else {
									$intChar -= ($intStamp + $intIndex) % $intMod;
								}
							}

							$strOutput .= chr($intChar);
						}

						fwrite($srmOutFile, base64_decode($strOutput));

						$intPosition++;
						$intPercent = round( ( $intPosition / $intNumChunk ) * 100, 0 );
						$this->msg("Decrypting [$intPercent%]", true);
					}
				}

				fclose($srmOutFile);
				fclose($srmInFile);

				break;
		}

		echo PHP_EOL;
	}

	// private function run() {
	// 	$strFileContents = file_get_contents($this->strInputFile);
	// 	$strOutput = '';
	// 	$strKey = md5($this->readString('Enter key: '));
	// 	$intAltMin = BASE64_MIN - ASCII_MIN;
	// 	$intAltMax = ASCII_MAX - (BASE64_MAX - ASCII_MIN);
	//
	// 	switch ($this->strAction) {
	// 		case 'encrypt':
	// 			$arrFileContents = str_split(base64_encode($strFileContents));
	// 			$intTotalContents = count($arrFileContents);
	//
	// 			foreach ($arrFileContents as $intIndex => $strChar) {
	// 				$intChar = ord($strChar);
	// 				$intChar -= $intAltMin;
	//
	// 				foreach (str_split($strKey) as $intKeyIndex => $strKeyChar) {
	// 					$intKeyChar = ord($strKeyChar);
	// 					$intMod = $intKeyChar % $intAltMax;
	// 					$intChar += $intMod;
	// 					$intChar -= ($intKeyIndex % $intMod);
	//
	// 					if ($intKeyIndex % 2 == 0) {
	// 						$intChar -= ($intIndex % $intMod);
	// 					} else {
	// 						$intChar += ($intIndex % $intMod);
	// 					}
	// 				}
	//
	// 				$intPercent = round( ( ($intIndex+1) / $intTotalContents ) * 100, 0 );
	// 				$this->msg("Encrypting [$intPercent%]", true);
	//
	// 				$strOutput .= chr($intChar);
	// 			}
	// 			break;
	// 		case 'decrypt':
	// 			$arrFileContents = str_split($strFileContents);
	// 			$intTotalContents = count($arrFileContents);
	//
	// 			foreach ($arrFileContents as $intIndex => $strChar) {
	// 				$intChar = ord($strChar);
	// 				$intChar += $intAltMin;
	//
	// 				foreach (str_split($strKey) as $intKeyIndex => $strKeyChar) {
	// 					$intKeyChar = ord($strKeyChar);
	// 					$intMod = $intKeyChar % $intAltMax;
	// 					$intChar -= $intMod;
	// 					$intChar += ($intKeyIndex % $intMod);
	//
	// 					if ($intKeyIndex % 2 == 0) {
	// 						$intChar += ($intIndex % $intMod);
	// 					} else {
	// 						$intChar -= ($intIndex % $intMod);
	// 					}
	// 				}
	//
	// 				$intPercent = round( ( ($intIndex+1) / $intTotalContents ) * 100, 0 );
	// 				$this->msg("Decrypting [$intPercent%]", true);
	//
	// 				$strOutput .= chr($intChar);
	// 			}
	//
	// 			$strOutput = base64_decode($strOutput);
	// 			break;
	// 	}
	//
	// 	return $strOutput;
	// }

	private function getKeyVal($strKey) {
		$intKey = 0;
		$arrKey = str_split($strKey);

		foreach ($arrKey as $intIndex => $strKeyChar) {
			$intKey += ord($strKeyChar);
		}

		return $intKey;
	}

	private function validate() {
		if (isset($this->arrActions[$this->strAction])) {
			$this->strAction = $this->arrActions[$this->strAction];
		}

		if (!in_array($this->strAction, $this->arrActions)) {
			$this->msg("Invalid <action>: '{$this->strAction}'!");
			return false;
		}

		if (!file_exists($this->strInputFile)) {
			$this->msg("Input file: '{$this->strInputFile}' does not exist!");
			return false;
		}

		if ($this->strOutputFile == '') {
			$this->strOutputFile = $this->strInputFile . '.' . $this->strAction . 'ed';
			$this->msg("NOTICE: No output file specified. Saving to file: '{$this->strOutputFile}'");
		}

		if (file_exists($this->strOutputFile)) {
			$this->msg("WARNING: Output file: '{$this->strOutputFile}' already exists!");

			if (!$this->confirm('Overwrite this file?')) {
				return false;
			}
		}

		return true;
	}

	private function confirm($strMsg = 'Are you sure?') {
		$arrAnswers = [
			'y',
			'n',
			'yes',
			'no'
		];

		do {
			$this->msg($strMsg);
			echo '(y/n): ';
			$strYesNo = trim(strtolower(fgets(STDIN)));
		} while (!in_array($strYesNo, $arrAnswers));

		return ($strYesNo == 'y' || $strYesNo == 'yes');
	}

	private function readString($strMsg = 'Enter value: ') {
		echo $strMsg;

		return trim(fgets(STDIN));
	}

	private function usage() {
		$this->msg("Usage: {$this->strScriptName} <action (encrypt|decrypt)> <input file> [<output file>]");
	}

	private function msg($strMsg, $blnReplace = false) {
		if ($blnReplace) {
			echo "\r$strMsg";
		} else {
			echo "$strMsg\n";
		}
	}
}

$objCryptor = new Cryptor($argv);
